// <auto-generated />
using System;
using DispatcherWeb.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DispatcherWeb.Migrations
{
    [DbContext(typeof(DispatcherWebDbContext))]
    [Migration("20190212154119_AddStatusFieldToDispatchTable")]
    partial class AddStatusFieldToDispatchTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Edition");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024);

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsGranted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<long?>("UserLinkId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<byte>("Result");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsAbandoned");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576);

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastTryTime");

                    b.Property<DateTime>("NextTryTime");

                    b.Property<byte>("Priority");

                    b.Property<short>("TryCount");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangeTime");

                    b.Property<byte>("ChangeType");

                    b.Property<long>("EntityChangeSetId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48);

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("ExtensionData");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("Reason")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EntityChangeId");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96);

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.IdentityServer4.PersistedGrantEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("AbpPersistedGrants");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<string>("TenantIds")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("TenantNotificationId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("ParentId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("DispatcherWeb.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsStatic");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("DispatcherWeb.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328);

                    b.Property<string>("GoogleAuthenticatorKey");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsLockoutEnabled");

                    b.Property<bool>("IsPhoneNumberConfirmed");

                    b.Property<bool>("IsTwoFactorEnabled");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("OfficeId");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32);

                    b.Property<Guid?>("ProfilePictureId");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128);

                    b.Property<bool>("ShouldChangePasswordOnNextLogin");

                    b.Property<string>("SignInToken");

                    b.Property<DateTime?>("SignInTokenExpireTimeUtc");

                    b.Property<Guid?>("SignaturePictureId");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("DispatcherWeb.BackgroundJobs.BackgroundJobHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Completed");

                    b.Property<string>("Details");

                    b.Property<DateTime?>("EndTime");

                    b.Property<int>("Job");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.ToTable("BackgroundJobHistory");
                });

            modelBuilder.Entity("DispatcherWeb.CannedTexts.CannedText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OfficeId");

                    b.Property<int>("TenantId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("CannedText");
                });

            modelBuilder.Entity("DispatcherWeb.Chat.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(4096);

                    b.Property<int>("ReadState");

                    b.Property<int>("ReceiverReadState");

                    b.Property<Guid?>("SharedMessageId");

                    b.Property<int>("Side");

                    b.Property<int?>("TargetTenantId");

                    b.Property<long>("TargetUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TargetTenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TargetTenantId", "UserId", "ReadState");

                    b.HasIndex("TenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TenantId", "UserId", "ReadState");

                    b.ToTable("AppChatMessages");
                });

            modelBuilder.Entity("DispatcherWeb.Customers.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(30);

                    b.Property<string>("Address1")
                        .HasMaxLength(128);

                    b.Property<string>("Address2")
                        .HasMaxLength(128);

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("CreditCardFirstName");

                    b.Property<string>("CreditCardLastName");

                    b.Property<string>("CreditCardStreetAddress");

                    b.Property<string>("CreditCardToken");

                    b.Property<string>("CreditCardZipCode");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("State")
                        .HasMaxLength(50);

                    b.Property<int>("TenantId");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("DispatcherWeb.Customers.CustomerContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("CustomerId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Email")
                        .HasMaxLength(200);

                    b.Property<string>("Fax")
                        .HasMaxLength(15);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15);

                    b.Property<int>("TenantId");

                    b.Property<string>("Title")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerContact");
                });

            modelBuilder.Entity("DispatcherWeb.Dispatching.Dispatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Acknowledged");

                    b.Property<DateTime?>("Complete");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("DriverId");

                    b.Property<Guid>("Guid");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("Loaded");

                    b.Property<string>("Message")
                        .HasMaxLength(500);

                    b.Property<int>("OrderLineId");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15);

                    b.Property<DateTime>("Sent");

                    b.Property<int>("Status");

                    b.Property<int>("TenantId");

                    b.Property<int?>("TrackableSmsId");

                    b.Property<int>("TruckId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("OrderLineId");

                    b.HasIndex("TrackableSmsId");

                    b.HasIndex("TruckId");

                    b.HasIndex("UserId");

                    b.ToTable("Dispatch");
                });

            modelBuilder.Entity("DispatcherWeb.Drivers.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CellPhoneNumber")
                        .HasMaxLength(15);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsInactive");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("OfficeId");

                    b.Property<int>("OrderNotifyPreferredFormat");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("DispatcherWeb.Drivers.DriverAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime>("Date");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("DriverId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Note");

                    b.Property<int>("OfficeId");

                    b.Property<int>("TenantId");

                    b.Property<int>("TruckId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("TruckId");

                    b.ToTable("DriverAssignment");
                });

            modelBuilder.Entity("DispatcherWeb.Drivers.DriverMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("DriverId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("MessageType");

                    b.Property<string>("Subject")
                        .HasMaxLength(100);

                    b.Property<int>("TenantId");

                    b.Property<DateTime>("TimeSent");

                    b.Property<Guid?>("TrackableEmailId");

                    b.Property<int?>("TrackableSmsId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DriverId");

                    b.HasIndex("TrackableEmailId");

                    b.HasIndex("TrackableSmsId");

                    b.ToTable("DriverMessage");
                });

            modelBuilder.Entity("DispatcherWeb.Emailing.OrderEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("EmailId");

                    b.Property<int>("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderEmails");
                });

            modelBuilder.Entity("DispatcherWeb.Emailing.QuoteEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("EmailId");

                    b.Property<int>("QuoteId");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.HasIndex("QuoteId");

                    b.ToTable("QuoteEmails");
                });

            modelBuilder.Entity("DispatcherWeb.Emailing.TrackableEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CalculatedDeliveryStatus");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Subject");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.ToTable("TrackableEmails");
                });

            modelBuilder.Entity("DispatcherWeb.Emailing.TrackableEmailEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Email");

                    b.Property<int?>("EmailDeliveryStatus");

                    b.Property<string>("Event");

                    b.Property<string>("EventContent");

                    b.Property<string>("FailReason");

                    b.Property<string>("SendGridEventId");

                    b.Property<long?>("SendGridEventTimestamp");

                    b.Property<Guid?>("TrackableEmailId");

                    b.Property<int?>("TrackableEmailReceiverId");

                    b.HasKey("Id");

                    b.HasIndex("TrackableEmailId");

                    b.HasIndex("TrackableEmailReceiverId");

                    b.ToTable("TrackableEmailEvents");
                });

            modelBuilder.Entity("DispatcherWeb.Emailing.TrackableEmailReceiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeliveryStatus");

                    b.Property<string>("Email");

                    b.Property<bool>("IsSender");

                    b.Property<int>("Order");

                    b.Property<int>("ReceiverKind");

                    b.Property<Guid>("TrackableEmailId");

                    b.HasKey("Id");

                    b.HasIndex("TrackableEmailId");

                    b.ToTable("TrackableEmailReceivers");
                });

            modelBuilder.Entity("DispatcherWeb.Friendships.Friendship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid?>("FriendProfilePictureId");

                    b.Property<string>("FriendTenancyName");

                    b.Property<int?>("FriendTenantId");

                    b.Property<long>("FriendUserId");

                    b.Property<string>("FriendUserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FriendTenantId", "FriendUserId");

                    b.HasIndex("FriendTenantId", "UserId");

                    b.HasIndex("TenantId", "FriendUserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AppFriendships");
                });

            modelBuilder.Entity("DispatcherWeb.LeaseHaulerAgreements.LeaseHaulerAgreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("LeaseHaulerContactId");

                    b.Property<int>("LeaseHaulerId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int>("ProjectId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("LeaseHaulerContactId");

                    b.HasIndex("LeaseHaulerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("LeaseHaulerAgreement");
                });

            modelBuilder.Entity("DispatcherWeb.LeaseHaulerAgreements.LeaseHaulerAgreementService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Designation");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("LeaseHaulerAgreementId");

                    b.Property<decimal?>("LeaseHaulerRate")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<string>("Note");

                    b.Property<int>("ServiceId");

                    b.Property<int?>("SupplierId");

                    b.Property<int>("TenantId");

                    b.Property<int>("UnitOfMeasureId");

                    b.HasKey("Id");

                    b.HasIndex("LeaseHaulerAgreementId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("LeaseHaulerAgreementService");
                });

            modelBuilder.Entity("DispatcherWeb.LeaseHaulers.LeaseHauler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(30);

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<string>("StreetAddress1")
                        .HasMaxLength(200);

                    b.Property<string>("StreetAddress2")
                        .HasMaxLength(200);

                    b.Property<int>("TenantId");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(12);

                    b.HasKey("Id");

                    b.ToTable("LeaseHauler");
                });

            modelBuilder.Entity("DispatcherWeb.LeaseHaulers.LeaseHaulerContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Email")
                        .HasMaxLength(120);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("LeaseHaulerId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<int>("TenantId");

                    b.Property<string>("Title")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("LeaseHaulerId");

                    b.ToTable("LeaseHaulerContact");
                });

            modelBuilder.Entity("DispatcherWeb.MultiTenancy.Accounting.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("TenantAddress");

                    b.Property<string>("TenantLegalName");

                    b.Property<string>("TenantTaxNo");

                    b.HasKey("Id");

                    b.ToTable("AppInvoices");
                });

            modelBuilder.Entity("DispatcherWeb.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DayCount");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("EditionId");

                    b.Property<int>("Gateway");

                    b.Property<string>("InvoiceNo");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("PaymentId");

                    b.Property<int?>("PaymentPeriodType");

                    b.Property<int>("Status");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EditionId");

                    b.HasIndex("PaymentId", "Gateway");

                    b.HasIndex("Status", "CreationTime");

                    b.ToTable("AppSubscriptionPayments");
                });

            modelBuilder.Entity("DispatcherWeb.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<Guid?>("CustomCssId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("EditionId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsInTrialPeriod");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LogoFileType")
                        .HasMaxLength(64);

                    b.Property<Guid?>("LogoId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("SubscriptionEndDateUtc");

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreationTime");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SubscriptionEndDateUtc");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("DispatcherWeb.Offices.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("BaseFuelCost")
                        .HasColumnType("money");

                    b.Property<bool>("CopyDeliverToLoadAtChargeTo");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("HeartlandPublicKey");

                    b.Property<string>("HeartlandSecretKey");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int>("TenantId");

                    b.Property<string>("TruckColor")
                        .IsRequired()
                        .HasMaxLength(7);

                    b.HasKey("Id");

                    b.ToTable("Office");
                });

            modelBuilder.Entity("DispatcherWeb.Orders.BilledOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("OfficeId");

                    b.Property<int>("OrderId");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("OrderId");

                    b.ToTable("BilledOrder");
                });

            modelBuilder.Entity("DispatcherWeb.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AuthorizationAmount");

                    b.Property<decimal?>("AuthorizationCaptureAmount");

                    b.Property<DateTime?>("AuthorizationCaptureDateTime");

                    b.Property<string>("AuthorizationCaptureResponse");

                    b.Property<decimal?>("AuthorizationCaptureSettlementAmount");

                    b.Property<string>("AuthorizationCaptureTransactionId");

                    b.Property<DateTime?>("AuthorizationDateTime");

                    b.Property<string>("AuthorizationTransactionId");

                    b.Property<decimal?>("AuthorizedAmount");

                    b.Property<decimal>("CODTotal")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<string>("ChargeTo")
                        .HasMaxLength(500);

                    b.Property<int?>("ContactId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("CreditCardFirstName");

                    b.Property<string>("CreditCardInfo");

                    b.Property<string>("CreditCardLastName");

                    b.Property<string>("CreditCardStreetAddress");

                    b.Property<string>("CreditCardToken");

                    b.Property<string>("CreditCardZipCode");

                    b.Property<int>("CustomerId");

                    b.Property<DateTime?>("DateTime");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeliverTo")
                        .HasMaxLength(500);

                    b.Property<string>("Directions");

                    b.Property<string>("EncryptedInternalNotes");

                    b.Property<decimal>("FreightTotal");

                    b.Property<decimal>("FuelSurcharge");

                    b.Property<decimal>("FuelSurchargeRate")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<bool>("HasInternalNotes");

                    b.Property<bool>("IsClosed");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFreightTotalOverridden");

                    b.Property<bool>("IsMaterialTotalOverridden");

                    b.Property<bool>("IsPending");

                    b.Property<string>("JobNumber")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("LastQuoteEmailId");

                    b.Property<string>("LoadAt")
                        .HasMaxLength(500);

                    b.Property<int>("LocationId");

                    b.Property<decimal>("MaterialTotal");

                    b.Property<double?>("NumberOfTrucks");

                    b.Property<string>("PONumber")
                        .HasMaxLength(20);

                    b.Property<int>("Priority");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("QuoteId");

                    b.Property<decimal>("SalesTax")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<decimal>("SalesTaxRate")
                        .HasColumnType("money");

                    b.Property<DateTime?>("SharedDateTime");

                    b.Property<string>("SpectrumNumber")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("StartTime");

                    b.Property<int?>("SupplierId");

                    b.Property<int>("TenantId");

                    b.Property<DateTime?>("Time");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LastQuoteEmailId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("QuoteId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("DispatcherWeb.Orders.OrderLeaseHauler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsReconciled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("LeaseHaulerId");

                    b.Property<decimal>("LeaseHaulerRate")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<string>("Note");

                    b.Property<int>("OrderId");

                    b.Property<int>("TenantId");

                    b.Property<int>("UnitOfMeasureId");

                    b.HasKey("Id");

                    b.HasIndex("LeaseHaulerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("OrderLeaseHauler");
                });

            modelBuilder.Entity("DispatcherWeb.Orders.OrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Designation");

                    b.Property<decimal?>("EstimatedAmount");

                    b.Property<decimal>("FreightPrice")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<decimal?>("FreightPricePerUnit")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool>("IsComplete");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFreightPricePerUnitOverridden");

                    b.Property<bool>("IsMaterialPricePerUnitOverridden");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("LineNumber");

                    b.Property<int?>("Loads");

                    b.Property<decimal>("MaterialActualPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("MaterialPrice")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<decimal?>("MaterialPricePerUnit")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Note");

                    b.Property<double?>("NumberOfTrucks");

                    b.Property<int>("OrderId");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("ServiceId");

                    b.Property<DateTime?>("SharedDateTime");

                    b.Property<int?>("SupplierId");

                    b.Property<int>("TenantId");

                    b.Property<DateTime?>("TimeOnJob");

                    b.Property<int>("UnitOfMeasureId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("OrderLine");
                });

            modelBuilder.Entity("DispatcherWeb.Orders.OrderLineOfficeAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("ActualQuantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("OfficeId");

                    b.Property<int>("OrderLineId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("OrderLineId");

                    b.ToTable("OrderLineOfficeAmount");
                });

            modelBuilder.Entity("DispatcherWeb.Orders.OrderLineTruck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("OrderLineId");

                    b.Property<int?>("ParentOrderLineTruckId");

                    b.Property<int>("Sequence");

                    b.Property<int>("TenantId");

                    b.Property<DateTime?>("TimeOnJob");

                    b.Property<int>("TruckId");

                    b.Property<decimal>("Utilization");

                    b.HasKey("Id");

                    b.HasIndex("OrderLineId");

                    b.HasIndex("ParentOrderLineTruckId");

                    b.HasIndex("TruckId");

                    b.ToTable("OrderLineTruck");
                });

            modelBuilder.Entity("DispatcherWeb.Orders.OrderTruck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("OrderId");

                    b.Property<int?>("ParentOrderTruckId");

                    b.Property<int>("TenantId");

                    b.Property<int>("TruckId");

                    b.Property<decimal>("Utilization");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ParentOrderTruckId");

                    b.HasIndex("TruckId");

                    b.ToTable("OrderTruck");
                });

            modelBuilder.Entity("DispatcherWeb.Orders.SharedOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("OfficeId");

                    b.Property<int>("OrderId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("OrderId");

                    b.ToTable("SharedOrder");
                });

            modelBuilder.Entity("DispatcherWeb.Orders.SharedOrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("OfficeId");

                    b.Property<int>("OrderLineId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("OrderLineId");

                    b.ToTable("SharedOrderLine");
                });

            modelBuilder.Entity("DispatcherWeb.Orders.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarrierId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("CustomerId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsBilled");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("OrderLineId");

                    b.Property<decimal>("Quantity");

                    b.Property<int?>("ServiceId");

                    b.Property<int>("TenantId");

                    b.Property<DateTime?>("TicketDate");

                    b.Property<string>("TicketNumber")
                        .HasMaxLength(30);

                    b.Property<string>("TruckCode")
                        .HasMaxLength(50);

                    b.Property<int?>("TruckId");

                    b.Property<int?>("UnitOfMeasureId");

                    b.HasKey("Id");

                    b.HasIndex("CarrierId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderLineId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TruckId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("DispatcherWeb.Projects.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChargeTo")
                        .HasMaxLength(500);

                    b.Property<int?>("ContactId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("CustomerId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeliverTo")
                        .HasMaxLength(500);

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("Directions");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<string>("LoadAt")
                        .HasMaxLength(500);

                    b.Property<string>("Location")
                        .HasMaxLength(500);

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Notes");

                    b.Property<string>("PONumber")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("StartDate");

                    b.Property<int>("Status");

                    b.Property<int?>("SupplierId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("DispatcherWeb.Projects.ProjectHistoryRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime>("DateTime");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("OfficeId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectHistory");
                });

            modelBuilder.Entity("DispatcherWeb.Projects.ProjectService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Designation");

                    b.Property<decimal?>("FreightRate")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<decimal?>("LeaseHaulerRate")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<string>("Note");

                    b.Property<decimal?>("PricePerUnit")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<int>("ProjectId");

                    b.Property<decimal?>("Quantity");

                    b.Property<int>("ServiceId");

                    b.Property<int?>("SupplierId");

                    b.Property<int>("TenantId");

                    b.Property<int>("UnitOfMeasureId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("ProjectService");
                });

            modelBuilder.Entity("DispatcherWeb.Quotes.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("BaseFuelCost")
                        .HasColumnType("money");

                    b.Property<bool>("CaptureHistory");

                    b.Property<string>("ChargeTo")
                        .HasMaxLength(500);

                    b.Property<int?>("ContactId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("CustomerId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeliverTo")
                        .HasMaxLength(500);

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("Directions");

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("LastQuoteEmailId");

                    b.Property<string>("LoadAt")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(155);

                    b.Property<string>("Notes");

                    b.Property<string>("PONumber")
                        .HasMaxLength(20);

                    b.Property<int>("ProjectId");

                    b.Property<DateTime?>("ProposalDate");

                    b.Property<DateTime?>("ProposalExpiryDate");

                    b.Property<string>("SpectrumNumber")
                        .HasMaxLength(20);

                    b.Property<int>("Status");

                    b.Property<int?>("SupplierId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LastQuoteEmailId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Quote");
                });

            modelBuilder.Entity("DispatcherWeb.Quotes.QuoteFieldDiff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Field");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("NewDisplayValue");

                    b.Property<int?>("NewId");

                    b.Property<string>("OldDisplayValue");

                    b.Property<int?>("OldId");

                    b.Property<int>("QuoteHistoryRecordId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("QuoteHistoryRecordId");

                    b.ToTable("QuoteFieldDiff");
                });

            modelBuilder.Entity("DispatcherWeb.Quotes.QuoteHistoryRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChangeType");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime>("DateTime");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("QuoteId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("QuoteId");

                    b.ToTable("QuoteHistory");
                });

            modelBuilder.Entity("DispatcherWeb.Quotes.QuoteService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Designation");

                    b.Property<decimal?>("FreightRate")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Note");

                    b.Property<decimal?>("PricePerUnit")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<decimal?>("Quantity");

                    b.Property<int>("QuoteId");

                    b.Property<int>("ServiceId");

                    b.Property<int?>("SupplierId");

                    b.Property<int>("TenantId");

                    b.Property<int>("UnitOfMeasureId");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("QuoteService");
                });

            modelBuilder.Entity("DispatcherWeb.ScheduledReports.ScheduledReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("ReportFormat");

                    b.Property<int>("ReportType");

                    b.Property<TimeSpan>("ScheduleTime");

                    b.Property<int>("SendOnDaysOfWeek");

                    b.Property<string>("SendTo")
                        .HasMaxLength(2000);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("ScheduledReport");
                });

            modelBuilder.Entity("DispatcherWeb.Services.OfficeServicePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Designation");

                    b.Property<decimal?>("FreightRate")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("OfficeId");

                    b.Property<decimal?>("PricePerUnit")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<int>("ServiceId");

                    b.Property<int>("TenantId");

                    b.Property<int>("UnitOfMeasureId");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("OfficeServicePrice");
                });

            modelBuilder.Entity("DispatcherWeb.Services.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("BillPerTon")
                        .HasColumnType("decimal(19, 4)");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsService");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("PredefinedServiceKind");

                    b.Property<string>("Service1")
                        .IsRequired()
                        .HasColumnName("Service")
                        .HasMaxLength(50);

                    b.Property<int>("TenantId");

                    b.Property<int?>("UnitOfMeasureId");

                    b.HasKey("Id");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("DispatcherWeb.Sms.TrackableSms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Sid")
                        .HasMaxLength(100);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("TrackableSms");
                });

            modelBuilder.Entity("DispatcherWeb.Storage.BinaryObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Bytes")
                        .IsRequired();

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AppBinaryObjects");
                });

            modelBuilder.Entity("DispatcherWeb.Suppliers.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10);

                    b.Property<int?>("CategoryId");

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Notes")
                        .HasMaxLength(1000);

                    b.Property<int?>("PredefinedSupplierKind");

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(200);

                    b.Property<int>("TenantId");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(12);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("DispatcherWeb.Suppliers.SupplierCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("PredefinedSupplierCategoryKind");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("SupplierCategory");
                });

            modelBuilder.Entity("DispatcherWeb.Suppliers.SupplierContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Email")
                        .HasMaxLength(120);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<int>("SupplierId");

                    b.Property<int>("TenantId");

                    b.Property<string>("Title")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierContact");
                });

            modelBuilder.Entity("DispatcherWeb.Trucks.SharedTruck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime>("Date");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("OfficeId");

                    b.Property<int>("TenantId");

                    b.Property<int>("TruckId");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("TruckId");

                    b.ToTable("SharedTruck");
                });

            modelBuilder.Entity("DispatcherWeb.Trucks.Truck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CargoCapacity");

                    b.Property<int>("Category");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<decimal>("CurrentHours");

                    b.Property<int>("CurrentMileage");

                    b.Property<int?>("DefaultDriverId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DriveAxleTires")
                        .HasMaxLength(50);

                    b.Property<string>("DropAxleTires")
                        .HasMaxLength(50);

                    b.Property<string>("Engine")
                        .HasMaxLength(50);

                    b.Property<int?>("FuelCapacity");

                    b.Property<int?>("FuelType");

                    b.Property<DateTime?>("InServiceDate");

                    b.Property<string>("InsurancePolicyNumber")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("InsuranceValidUntil");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsOutOfService");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("LocationId");

                    b.Property<string>("Make")
                        .HasMaxLength(50);

                    b.Property<string>("Model")
                        .HasMaxLength(50);

                    b.Property<string>("Plate")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("PlateExpiration");

                    b.Property<DateTime?>("PurchaseDate");

                    b.Property<decimal?>("PurchasePrice");

                    b.Property<string>("RearEnd")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("SoldDate");

                    b.Property<decimal?>("SoldPrice");

                    b.Property<string>("SteerTires")
                        .HasMaxLength(50);

                    b.Property<int>("TenantId");

                    b.Property<string>("TrailerTires")
                        .HasMaxLength(50);

                    b.Property<string>("Transmission")
                        .HasMaxLength(50);

                    b.Property<string>("TruckCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Vin")
                        .HasMaxLength(50);

                    b.Property<int?>("Year");

                    b.HasKey("Id");

                    b.HasIndex("DefaultDriverId");

                    b.HasIndex("LocationId");

                    b.ToTable("Truck");
                });

            modelBuilder.Entity("DispatcherWeb.Trucks.TruckFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<Guid>("FileId");

                    b.Property<string>("FileName")
                        .HasMaxLength(500);

                    b.Property<int>("FileType");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("TenantId");

                    b.Property<Guid?>("ThumbnailId");

                    b.Property<string>("Title")
                        .HasMaxLength(50);

                    b.Property<int>("TruckId");

                    b.HasKey("Id");

                    b.HasIndex("TruckId");

                    b.ToTable("TruckFile");
                });

            modelBuilder.Entity("DispatcherWeb.UnitsOfMeasure.UnitOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("UnitOfMeasure");
                });

            modelBuilder.Entity("DispatcherWeb.VehicleMaintenance.OutOfServiceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<DateTime?>("InServiceDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime>("OutOfServiceDate");

                    b.Property<string>("Reason")
                        .HasMaxLength(500);

                    b.Property<int>("TenantId");

                    b.Property<int>("TruckId");

                    b.HasKey("Id");

                    b.HasIndex("TruckId");

                    b.ToTable("OutOfServiceHistory");
                });

            modelBuilder.Entity("DispatcherWeb.VehicleMaintenance.PreventiveMaintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CompletedDate");

                    b.Property<decimal?>("CompletedHour");

                    b.Property<int?>("CompletedMileage");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<DateTime?>("DueDate");

                    b.Property<decimal?>("DueHour");

                    b.Property<int?>("DueMileage");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastDate");

                    b.Property<decimal>("LastHour");

                    b.Property<int>("LastMileage");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("TenantId");

                    b.Property<int>("TruckId");

                    b.Property<int>("VehicleServiceId");

                    b.Property<DateTime?>("WarningDate");

                    b.Property<decimal?>("WarningHour");

                    b.Property<int?>("WarningMileage");

                    b.HasKey("Id");

                    b.HasIndex("TruckId");

                    b.HasIndex("VehicleServiceId");

                    b.ToTable("PreventiveMaintenance");
                });

            modelBuilder.Entity("DispatcherWeb.VehicleMaintenance.VehicleService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<decimal?>("RecommendedHourInterval");

                    b.Property<int?>("RecommendedMileageInterval");

                    b.Property<int?>("RecommendedTimeInterval");

                    b.Property<int>("TenantId");

                    b.Property<int?>("WarningDays");

                    b.Property<decimal?>("WarningHours");

                    b.Property<int?>("WarningMiles");

                    b.HasKey("Id");

                    b.ToTable("VehicleService");
                });

            modelBuilder.Entity("DispatcherWeb.VehicleMaintenance.VehicleServiceDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<Guid>("FileId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("TenantId");

                    b.Property<int>("VehicleServiceId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleServiceId");

                    b.ToTable("VehicleServiceDocument");
                });

            modelBuilder.Entity("DispatcherWeb.VehicleMaintenance.VehicleServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasName("IX_Name");

                    b.ToTable("VehicleServiceType");
                });

            modelBuilder.Entity("DispatcherWeb.VehicleMaintenance.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AssignedToId");

                    b.Property<DateTime?>("CompletionDate");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("IssueDate");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Note")
                        .HasMaxLength(500);

                    b.Property<int>("Odometer");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int>("Status");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<int>("TenantId");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("TotalLaborCost")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<decimal>("TotalPartsCost")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int>("TruckId");

                    b.Property<int?>("VehicleServiceTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("TruckId");

                    b.HasIndex("VehicleServiceTypeId");

                    b.ToTable("WorkOrder");
                });

            modelBuilder.Entity("DispatcherWeb.VehicleMaintenance.WorkOrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal?>("LaborCost")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<decimal?>("LaborRate")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<decimal?>("LaborTime")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Note");

                    b.Property<decimal?>("PartsCost")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("TenantId");

                    b.Property<int>("VehicleServiceId");

                    b.Property<int>("WorkOrderId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleServiceId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderLine");
                });

            modelBuilder.Entity("DispatcherWeb.VehicleMaintenance.WorkOrderPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<Guid>("FileId");

                    b.Property<string>("FileName");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("TenantId");

                    b.Property<int>("WorkOrderId");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderPicture");
                });

            modelBuilder.Entity("DispatcherWeb.Editions.SubscribableEdition", b =>
                {
                    b.HasBaseType("Abp.Application.Editions.Edition");

                    b.Property<decimal?>("AnnualPrice");

                    b.Property<int?>("ExpiringEditionId");

                    b.Property<decimal?>("MonthlyPrice");

                    b.Property<int?>("TrialDayCount");

                    b.Property<int?>("WaitingDayAfterExpire");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator().HasValue("SubscribableEdition");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");


                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("DispatcherWeb.Authorization.Roles.Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("DispatcherWeb.Authorization.Users.User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("DispatcherWeb.Authorization.Users.User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("DispatcherWeb.Authorization.Users.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("DispatcherWeb.Authorization.Users.User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("DispatcherWeb.Authorization.Users.User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet")
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange")
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("DispatcherWeb.Authorization.Roles.Role", b =>
                {
                    b.HasOne("DispatcherWeb.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("DispatcherWeb.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("DispatcherWeb.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("DispatcherWeb.Authorization.Users.User", b =>
                {
                    b.HasOne("DispatcherWeb.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("DispatcherWeb.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("DispatcherWeb.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("DispatcherWeb.Offices.Office", "Office")
                        .WithMany("Users")
                        .HasForeignKey("OfficeId");
                });

            modelBuilder.Entity("DispatcherWeb.CannedTexts.CannedText", b =>
                {
                    b.HasOne("DispatcherWeb.Offices.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Customers.CustomerContact", b =>
                {
                    b.HasOne("DispatcherWeb.Customers.Customer", "Customer")
                        .WithMany("CustomerContacts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Dispatching.Dispatch", b =>
                {
                    b.HasOne("DispatcherWeb.Drivers.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DispatcherWeb.Orders.OrderLine", "OrderLine")
                        .WithMany()
                        .HasForeignKey("OrderLineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DispatcherWeb.Sms.TrackableSms", "TrackableSms")
                        .WithMany()
                        .HasForeignKey("TrackableSmsId");

                    b.HasOne("DispatcherWeb.Trucks.Truck", "Truck")
                        .WithMany()
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DispatcherWeb.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DispatcherWeb.Drivers.Driver", b =>
                {
                    b.HasOne("DispatcherWeb.Offices.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId");
                });

            modelBuilder.Entity("DispatcherWeb.Drivers.DriverAssignment", b =>
                {
                    b.HasOne("DispatcherWeb.Drivers.Driver", "Driver")
                        .WithMany("DriverAssignments")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Offices.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Trucks.Truck", "Truck")
                        .WithMany("DriverAssignments")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Drivers.DriverMessage", b =>
                {
                    b.HasOne("DispatcherWeb.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("DispatcherWeb.Drivers.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DispatcherWeb.Emailing.TrackableEmail", "TrackableEmail")
                        .WithMany()
                        .HasForeignKey("TrackableEmailId");

                    b.HasOne("DispatcherWeb.Sms.TrackableSms", "TrackableSms")
                        .WithMany()
                        .HasForeignKey("TrackableSmsId");
                });

            modelBuilder.Entity("DispatcherWeb.Emailing.OrderEmail", b =>
                {
                    b.HasOne("DispatcherWeb.Emailing.TrackableEmail", "Email")
                        .WithMany("OrderEmails")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Orders.Order", "Order")
                        .WithMany("OrderEmails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Emailing.QuoteEmail", b =>
                {
                    b.HasOne("DispatcherWeb.Emailing.TrackableEmail", "Email")
                        .WithMany("QuoteEmails")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Quotes.Quote", "Quote")
                        .WithMany("QuoteEmails")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Emailing.TrackableEmail", b =>
                {
                    b.HasOne("DispatcherWeb.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");
                });

            modelBuilder.Entity("DispatcherWeb.Emailing.TrackableEmailEvent", b =>
                {
                    b.HasOne("DispatcherWeb.Emailing.TrackableEmail", "TrackableEmail")
                        .WithMany("Events")
                        .HasForeignKey("TrackableEmailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Emailing.TrackableEmailReceiver", "TrackableEmailReceiver")
                        .WithMany("Events")
                        .HasForeignKey("TrackableEmailReceiverId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Emailing.TrackableEmailReceiver", b =>
                {
                    b.HasOne("DispatcherWeb.Emailing.TrackableEmail", "TrackableEmail")
                        .WithMany("Receivers")
                        .HasForeignKey("TrackableEmailId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.LeaseHaulerAgreements.LeaseHaulerAgreement", b =>
                {
                    b.HasOne("DispatcherWeb.LeaseHaulers.LeaseHaulerContact", "LeaseHaulerContact")
                        .WithMany()
                        .HasForeignKey("LeaseHaulerContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.LeaseHaulers.LeaseHauler", "LeaseHauler")
                        .WithMany()
                        .HasForeignKey("LeaseHaulerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Projects.Project", "Project")
                        .WithMany("LeaseHaulerAgreements")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.LeaseHaulerAgreements.LeaseHaulerAgreementService", b =>
                {
                    b.HasOne("DispatcherWeb.LeaseHaulerAgreements.LeaseHaulerAgreement", "LeaseHaulerAgreement")
                        .WithMany("LeaseHaulerAgreementServices")
                        .HasForeignKey("LeaseHaulerAgreementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Services.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.UnitsOfMeasure.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.LeaseHaulers.LeaseHaulerContact", b =>
                {
                    b.HasOne("DispatcherWeb.LeaseHaulers.LeaseHauler", "LeaseHauler")
                        .WithMany("LeaseHaulerContacts")
                        .HasForeignKey("LeaseHaulerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DispatcherWeb.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("DispatcherWeb.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("DispatcherWeb.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("DispatcherWeb.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("DispatcherWeb.Orders.BilledOrder", b =>
                {
                    b.HasOne("DispatcherWeb.Offices.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Orders.Order", "Order")
                        .WithMany("BilledOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Orders.Order", b =>
                {
                    b.HasOne("DispatcherWeb.Customers.CustomerContact", "CustomerContact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("DispatcherWeb.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Emailing.TrackableEmail", "LastQuoteEmail")
                        .WithMany()
                        .HasForeignKey("LastQuoteEmailId");

                    b.HasOne("DispatcherWeb.Offices.Office", "Office")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("DispatcherWeb.Quotes.Quote", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteId");

                    b.HasOne("DispatcherWeb.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Orders.OrderLeaseHauler", b =>
                {
                    b.HasOne("DispatcherWeb.LeaseHaulers.LeaseHauler", "LeaseHauler")
                        .WithMany()
                        .HasForeignKey("LeaseHaulerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Orders.Order", "Order")
                        .WithMany("OrderLeaseHaulers")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.UnitsOfMeasure.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Orders.OrderLine", b =>
                {
                    b.HasOne("DispatcherWeb.Orders.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Services.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.UnitsOfMeasure.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Orders.OrderLineOfficeAmount", b =>
                {
                    b.HasOne("DispatcherWeb.Offices.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Orders.OrderLine", "OrderLine")
                        .WithMany("OfficeAmounts")
                        .HasForeignKey("OrderLineId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Orders.OrderLineTruck", b =>
                {
                    b.HasOne("DispatcherWeb.Orders.OrderLine", "OrderLine")
                        .WithMany("OrderLineTrucks")
                        .HasForeignKey("OrderLineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DispatcherWeb.Orders.OrderLineTruck", "ParentOrderLineTruck")
                        .WithMany()
                        .HasForeignKey("ParentOrderLineTruckId");

                    b.HasOne("DispatcherWeb.Trucks.Truck", "Truck")
                        .WithMany("OrderLineTrucks")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DispatcherWeb.Orders.OrderTruck", b =>
                {
                    b.HasOne("DispatcherWeb.Orders.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DispatcherWeb.Orders.OrderTruck", "ParentOrderTruck")
                        .WithMany("DependentOrderTrucks")
                        .HasForeignKey("ParentOrderTruckId");

                    b.HasOne("DispatcherWeb.Trucks.Truck", "Truck")
                        .WithMany()
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DispatcherWeb.Orders.SharedOrder", b =>
                {
                    b.HasOne("DispatcherWeb.Offices.Office", "Office")
                        .WithMany("SharedOrders")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Orders.Order", "Order")
                        .WithMany("SharedOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Orders.SharedOrderLine", b =>
                {
                    b.HasOne("DispatcherWeb.Offices.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DispatcherWeb.Orders.OrderLine", "OrderLine")
                        .WithMany("SharedOrderLines")
                        .HasForeignKey("OrderLineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DispatcherWeb.Orders.Ticket", b =>
                {
                    b.HasOne("DispatcherWeb.Customers.Customer", "Carrier")
                        .WithMany()
                        .HasForeignKey("CarrierId");

                    b.HasOne("DispatcherWeb.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("DispatcherWeb.Orders.OrderLine", "OrderLine")
                        .WithMany()
                        .HasForeignKey("OrderLineId");

                    b.HasOne("DispatcherWeb.Services.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("DispatcherWeb.Trucks.Truck", "Truck")
                        .WithMany("Tickets")
                        .HasForeignKey("TruckId");

                    b.HasOne("DispatcherWeb.UnitsOfMeasure.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId");
                });

            modelBuilder.Entity("DispatcherWeb.Projects.Project", b =>
                {
                    b.HasOne("DispatcherWeb.Customers.CustomerContact", "CustomerContact")
                        .WithMany("Projects")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Customers.Customer", "Customer")
                        .WithMany("Projects")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Projects.ProjectHistoryRecord", b =>
                {
                    b.HasOne("DispatcherWeb.Offices.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Projects.Project", "Project")
                        .WithMany("ProjectHistory")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Authorization.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Projects.ProjectService", b =>
                {
                    b.HasOne("DispatcherWeb.Projects.Project", "Project")
                        .WithMany("ProjectServices")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Services.Service", "Service")
                        .WithMany("ProjectServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.UnitsOfMeasure.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Quotes.Quote", b =>
                {
                    b.HasOne("DispatcherWeb.Customers.CustomerContact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Emailing.TrackableEmail", "LastQuoteEmail")
                        .WithMany()
                        .HasForeignKey("LastQuoteEmailId");

                    b.HasOne("DispatcherWeb.Projects.Project", "Project")
                        .WithMany("Quotes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Quotes.QuoteFieldDiff", b =>
                {
                    b.HasOne("DispatcherWeb.Quotes.QuoteHistoryRecord", "QuoteHistoryRecord")
                        .WithMany("FieldDiffs")
                        .HasForeignKey("QuoteHistoryRecordId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Quotes.QuoteHistoryRecord", b =>
                {
                    b.HasOne("DispatcherWeb.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Quotes.Quote", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Quotes.QuoteService", b =>
                {
                    b.HasOne("DispatcherWeb.Quotes.Quote", "Quote")
                        .WithMany("QuoteServices")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Services.Service", "Service")
                        .WithMany("QuoteServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.UnitsOfMeasure.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Services.OfficeServicePrice", b =>
                {
                    b.HasOne("DispatcherWeb.Offices.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Services.Service", "Service")
                        .WithMany("OfficeServicePrices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.UnitsOfMeasure.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Suppliers.Supplier", b =>
                {
                    b.HasOne("DispatcherWeb.Suppliers.SupplierCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("DispatcherWeb.Suppliers.SupplierContact", b =>
                {
                    b.HasOne("DispatcherWeb.Suppliers.Supplier", "Supplier")
                        .WithMany("SupplierContacts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Trucks.SharedTruck", b =>
                {
                    b.HasOne("DispatcherWeb.Offices.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispatcherWeb.Trucks.Truck", "Truck")
                        .WithMany("SharedTrucks")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Trucks.Truck", b =>
                {
                    b.HasOne("DispatcherWeb.Drivers.Driver", "DefaultDriver")
                        .WithMany("Trucks")
                        .HasForeignKey("DefaultDriverId");

                    b.HasOne("DispatcherWeb.Offices.Office", "Office")
                        .WithMany("Trucks")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DispatcherWeb.Trucks.TruckFile", b =>
                {
                    b.HasOne("DispatcherWeb.Trucks.Truck", "Truck")
                        .WithMany("Files")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DispatcherWeb.VehicleMaintenance.OutOfServiceHistory", b =>
                {
                    b.HasOne("DispatcherWeb.Trucks.Truck", "Truck")
                        .WithMany("OutOfServiceHistories")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DispatcherWeb.VehicleMaintenance.PreventiveMaintenance", b =>
                {
                    b.HasOne("DispatcherWeb.Trucks.Truck", "Truck")
                        .WithMany("PreventiveMaintenances")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DispatcherWeb.VehicleMaintenance.VehicleService", "VehicleService")
                        .WithMany("PreventiveMaintenance")
                        .HasForeignKey("VehicleServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DispatcherWeb.VehicleMaintenance.VehicleServiceDocument", b =>
                {
                    b.HasOne("DispatcherWeb.VehicleMaintenance.VehicleService", "VehicleService")
                        .WithMany("Documents")
                        .HasForeignKey("VehicleServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DispatcherWeb.VehicleMaintenance.WorkOrder", b =>
                {
                    b.HasOne("DispatcherWeb.Authorization.Users.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId");

                    b.HasOne("DispatcherWeb.Trucks.Truck", "Truck")
                        .WithMany("WorkOrders")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DispatcherWeb.VehicleMaintenance.VehicleServiceType", "VehicleServiceType")
                        .WithMany("WorkOrders")
                        .HasForeignKey("VehicleServiceTypeId");
                });

            modelBuilder.Entity("DispatcherWeb.VehicleMaintenance.WorkOrderLine", b =>
                {
                    b.HasOne("DispatcherWeb.VehicleMaintenance.VehicleService", "VehicleService")
                        .WithMany()
                        .HasForeignKey("VehicleServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DispatcherWeb.VehicleMaintenance.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderLines")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DispatcherWeb.VehicleMaintenance.WorkOrderPicture", b =>
                {
                    b.HasOne("DispatcherWeb.VehicleMaintenance.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderPictures")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("DispatcherWeb.Authorization.Roles.Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("DispatcherWeb.Authorization.Users.User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
