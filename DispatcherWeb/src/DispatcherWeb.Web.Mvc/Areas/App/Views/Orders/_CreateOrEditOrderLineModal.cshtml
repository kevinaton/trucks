@using System.Threading.Tasks
@using Abp.Configuration
@using DispatcherWeb.Configuration
@using DispatcherWeb.Features
@using Abp.Application.Features
@using DispatcherWeb.Infrastructure.Extensions
@using DispatcherWeb.Orders.Dto
@using DispatcherWeb.Web.Areas.App.Models.Common.Modals
@using Microsoft.EntityFrameworkCore
@using DispatcherWeb.Authorization
@model OrderLineEditDto
@await Html.PartialAsync("~/Areas/app/Views/Common/Modals/_ModalHeader.cshtml", new ModalHeaderViewModel(Model.Id > 0 ? "Edit line" : "Add new line"))

<div class="modal-body">
    <form role="form" novalidate class="form-validation order-line-form">
        <input type="hidden" asp-for="Id" />
        <input type="hidden" asp-for="OrderId" />
        <input type="hidden" asp-for="QuoteId" />
        <input type="hidden" asp-for="IsMaterialPricePerUnitOverridden" />
        <input type="hidden" asp-for="IsFreightPricePerUnitOverridden" />
        <input type="hidden" asp-for="IsMaterialPriceOverridden" />
        <input type="hidden" asp-for="IsFreightPriceOverridden" />
        <input type="hidden" asp-for="IsTaxable" />
        <input type="hidden" asp-for="StaggeredTimeKind" value="@((int)Model.StaggeredTimeKind)" />
        <div class="form-group">
            <label>Line #</label>
            <input class="form-control" type="text" asp-for="LineNumber" readonly>
        </div>
        <div class="form-group">
            <label class="required-label">Designation</label>
            <select class="form-control" required asp-for="Designation" asp-items="Html.GetEnumSelectList<DesignationEnum>()">
                <option value="">Select a designation</option>
            </select>
        </div>
        <div class="form-group">
            <label>Load At</label>
            <div class="input-group">
                <select class="form-control" asp-for="LoadAtId">
                    <option value="">@L("SelectALocation")</option>
                    @if (Model.LoadAtId.HasValue)
                    {
                        <option selected value="@Model.LoadAtId">@Model.LoadAtName</option>
                    }
                </select>
                @if (await PermissionChecker.IsGrantedAsync(AppPermissions.Pages_Locations))
                {
                    <span class="input-group-btn">
                        <button type="button" class="btn btn-default AddNewLocationButton" data-target-field="LoadAtId"><span class="fa fa-plus"></span></button>
                    </span>
                }
            </div>
        </div>
        <div class="form-group">
            <label>Deliver To</label>
            <div class="input-group">
                <select class="form-control" asp-for="DeliverToId">
                    <option value="">@L("SelectALocation")</option>
                    @if (Model.DeliverToId.HasValue)
                    {
                        <option selected value="@Model.DeliverToId">@Model.DeliverToName</option>
                    }
                </select>
                @if (await PermissionChecker.IsGrantedAsync(AppPermissions.Pages_Locations))
                {
                    <span class="input-group-btn">
                        <button type="button" class="btn btn-default AddNewLocationButton" data-target-field="DeliverToId"><span class="fa fa-plus"></span></button>
                    </span>
                }
            </div>
        </div>
        <div class="form-group">
            <label class="required-label">Item</label>
            <div class="input-group">
                <select class="form-control" asp-for="ServiceId" required>
                    <option value="">Select an item</option>
                    @if (Model.ServiceId != 0)
                    {
                        <option selected value="@Model.ServiceId">@Model.ServiceName</option>
                    }
                </select>
                @if (await PermissionChecker.IsGrantedAsync(AppPermissions.Pages_Services))
                {
                    <span class="input-group-btn">
                        <button type="button" class="btn btn-default" id="AddNewServiceButton"><span class="fa fa-plus"></span></button>
                    </span>
                }
            </div>

        </div>
        <div class="form-group">
            <label class="required-label" for="MaterialUomId">Material UOM</label>
            <select class="form-control" asp-for="MaterialUomId">
                <option value=""
                        data-placeholder-default="Select a UOM"
                        data-placeholder-no-items="No Prices defined for the selected Item"
                        data-placeholder-no-parent="Select an Item first">
                    Select Material UOM
                </option>
                @if (Model.MaterialUomId != 0)
                {
                    <option selected value="@Model.MaterialUomId">@Model.MaterialUomName</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label class="required-label" for="FreightUomId">Freight UOM</label>
            <select class="form-control" asp-for="FreightUomId">
                <option value=""
                        data-placeholder-default="Select a UOM"
                        data-placeholder-no-items="No Prices defined for the selected Item"
                        data-placeholder-no-parent="Select an Item first">
                    Select Freight UOM
                </option>
                @if (Model.FreightUomId != 0)
                {
                    <option selected value="@Model.FreightUomId">@Model.FreightUomName</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label>Material Rate</label>
            <input class="form-control" type="text" asp-for="MaterialPricePerUnit" data-rule-number="true" data-rule-min="0" data-rule-max="@AppConsts.MaxDecimalDatabaseLength">
        </div>
        <div class="form-group">
            <label>Freight Rate</label>
            <input class="form-control" type="text" asp-for="FreightPricePerUnit" data-rule-number="true" data-rule-min="0" data-rule-max="@AppConsts.MaxDecimalDatabaseLength">
        </div>
        <div class="form-group">
            <label>@L("LHRate")</label>
            <input class="form-control" type="text" asp-for="LeaseHaulerRate" data-rule-number="true" data-rule-min="0" data-rule-max="@AppConsts.MaxDecimalDatabaseLength">
        </div>
        <div class="form-group">
            <label>Material Quantity</label>
            <input class="form-control" type="text" asp-for="MaterialQuantity" data-rule-number="true" data-rule-min="0" data-rule-max="1000000">
        </div>
        <div class="form-group">
            <label>Freight Quantity</label>
            <input class="form-control" type="text" asp-for="FreightQuantity" data-rule-number="true" data-rule-min="0" data-rule-max="1000000">
        </div>

        <div class="form-group">
            <label>Material</label>
            <div class="input-group">
                <input class="form-control" type="text" asp-for="MaterialPrice" disabled="@(Model.CanOverrideTotals && Model.IsMaterialPriceOverridden ? null : "disabled")" data-rule-number="true" data-rule-min="0" data-rule-max="@AppConsts.MaxDecimalDatabaseLength" required>
                <span class="input-group-btn" @Html.StyleDisplayNone(!Model.CanOverrideTotals)>
                    <button type="button" class="btn btn-default" id="UnlockMaterialTotalButton"><span class="fas fa-unlock"></span></button>
                </span>
            </div>
        </div>
        <div class="form-group">
            <label>Freight</label>
            <div class="input-group">
                <input class="form-control" type="text" asp-for="FreightPrice" disabled="@(Model.CanOverrideTotals && Model.IsFreightPriceOverridden ? null : "disabled")" data-rule-number="true" data-rule-min="0" data-rule-max="@AppConsts.MaxDecimalDatabaseLength" required>
                <span class="input-group-btn" @Html.StyleDisplayNone(!Model.CanOverrideTotals)>
                    <button type="button" class="btn btn-default" id="UnlockFreightTotalButton"><span class="fas fa-unlock"></span></button>
                </span>
            </div>
        </div>
        <div class="form-group">
            <label>Requested Number of Trucks</label>
            <input class="form-control" type="text" asp-for="NumberOfTrucks" data-rule-number="true" data-rule-min="0" data-rule-max="1000000">
        </div>
        @if (await SettingManager.DispatchViaAny())
        {
            <div class="form-group">
                <label asp-for="IsMultipleLoads" class="m-checkbox">
                    <input type="checkbox" id="IsMultipleLoads" name="IsMultipleLoads" value="true" @Html.Raw(!Model.IsMultipleLoads ? "" : "checked=\"checked\"")>
                    @L("RunUntilStopped")
                    <span></span>
                </label>
            </div>
        }
        <div class="form-group">
            <label class="control-label">@L("TimeOnJob"):</label>
            <div class="input-group">
                <input type="text" class="form-control" asp-for="TimeOnJob">
                <span class="input-group-btn" @Html.StyleDisplayNone(!(Model.NumberOfTrucks > 0))>
                    <button type="button" class="btn btn-default" id="SetStaggeredTimeButton" title="@L("SetStaggeredTimes")"><span class="far fa-clock"></span></button>
                </span>
            </div>
        </div>
        <div class="form-group">
            <label>Note</label>
            <textarea class="form-control" rows="5" asp-for="Note"></textarea>
        </div>
        @if (await SettingManager.GetSettingValueAsync<bool>(AppSettings.TimeAndPay.AllowProductionPay) && await FeatureChecker.IsEnabledAsync(AppFeatures.DriverProductionPayFeature))
        {
            <div class="form-group" style="display: none">
                <label asp-for="ProductionPay" class="m-checkbox">
                    <input type="checkbox" id="ProductionPay" name="ProductionPay" value="true" checked="@(Model.ProductionPay ? "checked" : null)">
                    @L("ProductionPay")
                    <span></span>
                </label>
            </div>
        }
    </form>
</div>

@await Html.PartialAsync("~/Areas/app/Views/Common/Modals/_ModalFooterWithSaveAndCancel.cshtml")
